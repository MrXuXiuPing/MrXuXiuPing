<template> 
	<!-- :http-request="uploadSectionFile"
 :on-preview="handlePreview"
 :on-remove="handleRemove" -->
	<!-- <el-upload class="upload-demo" action="#" :show-file-list="false"
		:on-success="handleAvatarSuccess" :before-upload="beforeAvatarUpload" :file-list="fileList" list-type="picture">
		<el-button size="small" type="primary">点击上传</el-button>
		<div slot="tip" class="el-upload__tip">只能上传jpg/png文件，且不超过500kb</div>
		<img v-if="tableData.avator" :src="tableData.avator" class="avatar">
	</el-upload> -->

<el-upload
	class="upload-demo"
	accept="image/png,image/jpg,image/jpeg"
	ref="upload"
	:file-list="fileLists"
	multiple
	action="#"
	:on-change="handlePreview"
	:on-remove="handleRemove"
	list-type="text"
	:limit="9"
	:auto-upload="false">
	<el-button slot="trigger" size="small" type="primary">选取文件</el-button>
	<el-button style="margin-left: 10px;" size="small" type="success" @click="submitUpload">上传到服务器</el-button>
	<div slot="tip" class="el-upload__tip">只能上传jpg/png格式图片，且图片大小不超过2MB</div>
</el-upload>
</template>
<script>
	export default {
		data() {
			return {
				fileLists: []
			};
		},
		methods: {
			submitUpload() {
				let that = this;
				let params = new FormData();
				// 注意此处对文件数组进行了参数循环添加
				if (that.fileLists.length > 0) {
					console.log(fileLists);
					that.fileLists.forEach(function(file) {
						params.append('questionImages', file.raw);
					})
				} else {
					that.$message.warning("当前没有合适图片可以上传");
				}
				that.$axios({
						url: "http://localhost:8081/api-file/aliyun/oss/upload",
						method: "post",
						data: params,
						headers: {
							"Content-Type": "multipart/form-data"
						}
					})
					.then(function(res) {
						console.log(res.data.filePath)
						// if (res.data.result == "ok") {
						// 	that.$message.success('上传成功!');
						// }
					})
					.catch(function(err) {
						that.$message.error('网络请求异常!');
					});
			},

			handleRemove(file, fileList) {
				this.fileLists = fileList;
			},

			handlePreview(file, fileList) {
				let that = this;
				// if (file.raw.type != 'image/jpg' && file.raw.type != 'image/png') {
				// 	that.$message.error('图片只能是jpg/png格式!');
				// 	return;
				// }
				if (file.raw.size > 1024 * 1024 * 2) {
					that.$message.error('上传文件大小不能超过 2MB!');
					return;
				}
				that.fileLists = fileList;
			},
		}
	}
</script>
<!-- <template> 
  <div>
    <el-upload
      action="http://yjlive160322.oss-cn-beijing.aliyuncs.com"
      :data="dataObj"
      list-type="picture"
      :multiple="false" :show-file-list="showFileList"
      :file-list="fileList"
      :before-upload="beforeUpload"
      :on-remove="handleRemove"
      :on-success="handleUploadSuccess"
      :on-preview="handlePreview">
      <el-button size="small" type="primary">点击上传</el-button>
      <div slot="tip" class="el-upload__tip">只能上传jpg/png文件，且不超过10MB</div>
    </el-upload>
    <el-dialog :visible.sync="dialogVisible">
      <img width="100%" :src="fileList[0].url" alt="">
    </el-dialog>
  </div>
</template>
<script>
  import {policy} from '@/api/oss'

  export default {
    name: 'singleUpload',
    props: {
      value: String
    },
    computed: {
      imageUrl() {
        return this.value;
      },
      imageName() {
        if (this.value != null && this.value !== '') {
          return this.value.substr(this.value.lastIndexOf("/") + 1);
        } else {
          return null;
        }
      },
      fileList() {
        return [{
          name: this.imageName,
          url: this.imageUrl
        }]
      },
      showFileList: {
        get: function () {
          return this.value !== null && this.value !== ''&& this.value!==undefined;
        },
        set: function (newValue) {
        }
      }
    },
    data() {
      return {
        dataObj: {
          policy: '',
          signature: '',
          key: '',
          ossaccessKeyId: '',
          dir: '',
          host: ''
        },
        dialogVisible: false
      };
    },
    methods: {
      emitInput(val) {
        this.$emit('input', val)
      },
      handleRemove(file, fileList) {
        this.emitInput('');
      },
      handlePreview(file) {
        this.dialogVisible = true;
      },
      beforeUpload(file) {
        let _self = this;
        return new Promise((resolve, reject) => {
          policy().then(response => {
            _self.dataObj.policy = response.data.policy;
            _self.dataObj.signature = response.data.signature;
            _self.dataObj.ossaccessKeyId = response.data.accessKeyId;
            _self.dataObj.key = response.data.dir + '/${filename}';
            _self.dataObj.dir = response.data.dir;
            _self.dataObj.host = response.data.host;
            resolve(true)
          }).catch(err => {
            console.log(err)
            reject(false)
          })
        })
      },
      handleUploadSuccess(res, file) {
        this.showFileList = true;
        this.fileList.pop();
        this.fileList.push({name: file.name, url: this.dataObj.host + '/' + this.dataObj.dir + '/' + file.name});
        this.emitInput(this.fileList[0].url);
      }
    }
  }
</script>
<style>

</style>


 -->
